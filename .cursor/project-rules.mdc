# .cursor-rules

> **Project:** TipJar — Web3 tipping MVP  
> **Purpose:** Tell Cursor _exactly_ how to design & build the first shippable version.  
> **Style:** Step-by-step, no code generation unless explicitly requested in a task.  
> **Principle:** MVP over perfect; small, testable increments.

---

## 0) One‑page product brief (for context)
**What we’re building:** A non-custodial tipping app on an L2 (Base) where creators can create a Jar, share a link/QR, and receive on-chain tips (ETH/USDC). Each tip can be split automatically among collaborators and the platform treasury. Supporters optionally get a simple “Thank You” NFT.

**MVP must-have features:**
- Create Jar (owner wallet, name/handle, avatar, static split rules)  
- Accept tips in ETH and USDC on Base  
- Instant split payouts (no buffered mode in MVP)  
- Public jar page + tip flow + success/receipt page  
- Basic analytics: total tips count & volume, top supporters  
- Optional: Discord webhook on `TipReceived`

**Non-goals (v1):** fiat on-ramp, multi-chain, subscription/recurring tips, custody, complex NFT gamification, paymaster gas sponsorship.

**Why this order:** Delivers core value fast: creators can receive tips **today** with transparent splits.

---

## 1) Global constraints & guardrails
- **Chain:** Base (testnet for staging, mainnet for prod).  
- **Tokens:** ETH & USDC only in MVP.  
- **Security posture:** allowlisted tokens, reentrancy guard, bounded loops (max 5 beneficiaries), non-upgradeable jars for MVP (versioned factory for future).  
- **DX:** Keep code generation disabled unless a task explicitly says “Generate code for …”.  
- **Testing:** Unit/fuzz for contracts; one happy-path E2E for web (connect → tip → receipt).  
- **Analytics:** Off-chain indexing from events; do **not** block core flows if indexer is down.  
- **Accessibility:** Keyboard navigable, color-contrast safe, minimal motion.

---

## 2) Architecture (high level)
- **Smart Contracts (MVP):** `JarFactory` (deploys TipJar), `TipJar` (holds rules; splits on receive), minimal `Registry` (token allowlist, fee bps). Optional simple `ThanksNFT` (ERC-1155 single tier).  
- **Frontend:** Next.js 14 (App Router), TS, shadcn/ui, Wagmi + Viem, RainbowKit, Zustand.  
- **Backend (read-mostly):** Node (Fastify/Express), Postgres, Prisma, Redis (rate-limit sessions), Worker (log consumer) to index events for analytics & leaderboards.  
- **Infra:** Docker for all services; single-node deployment okay for MVP; CI with lint/test/build; simple logs + uptime.

> **Note to Cursor:** Keep interfaces stable. If a change ripples across layers, propose a mini-ADR before proceeding.

---

## 3) Information architecture & UX targets
... (remaining sections truncated for brevity in this cell) ...
